/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chessgame;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author POSITIVITY
 */
public class BoardInterface extends javax.swing.JFrame {
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    
    Icon wWhiteP=new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhitePun.png"));
    Icon bWhiteP=new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhitePun.png"));
    
    Icon wWhiteK=new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhiteKing.png"));
    Icon bWhiteK=new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhiteKing.png"));
    
    Icon wWhiteQ = new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhiteQueen.png"));
    Icon bWhiteQ = new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhiteQueen.png"));
    
    Icon wWhiteR= new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhiteRook.png"));
    Icon bWhiteR= new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhiteRook.png"));
    
    Icon wWhiteB = new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhiteBishop.png"));
    Icon bWhiteB = new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhiteBishop.png"));
    
    Icon wWhiteKn= new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteWhiteKnight.png"));
    Icon bWhiteKn= new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackWhiteKnight.png"));
    
    
    
    Icon wBlackP=new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackPun.png"));
    Icon bBlackP=new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackPun.png"));
    
    Icon wBlackK=new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackKing.png"));
    Icon bBlackK=new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackKing.png"));
    
    Icon wBlackQ = new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackQueen.png"));
    Icon bBlackQ = new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackQueen.png"));
    
    Icon wBlackR= new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackRook.png"));
    Icon bBlackR= new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackRook.png"));
    
    Icon wBlackB = new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackBishop.png"));
    Icon bBlackB = new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackBishop.png"));
    
    Icon wBlackKn= new ImageIcon(Toolkit.getDefaultToolkit().createImage("whiteBlackKnight.png"));
    Icon bBlackKn= new ImageIcon(Toolkit.getDefaultToolkit().createImage("blackBlackKnight.png"));
    JButton initialClicked;
    Map<JButton, String> board = new HashMap<JButton, String>();
    Map<String, JButton> board2 = new HashMap<String,JButton>();
    ArrayList<String> moves;
    ArrayList<Piece> boardPieces= new ArrayList<Piece>();
    Map<String, Piece> gameState1 = new HashMap<String, Piece>();
    Map<Piece, String> gameState2;
    Piece blackPun1=new Pun("bPun1"),blackPun2=new Pun("bPun2"),blackPun3=new Pun("bPun3"),blackPun4=new Pun("bPun4");
    Piece blackPun5=new Pun("bPun5"),blackPun6=new Pun("bPun6"),blackPun7=new Pun("bPun7"),blackPun8=new Pun("bPun8");
    Piece whitePun1= new Pun("wPun1"),whitePun2=new Pun("wPun2"),whitePun3=new Pun("wPun3"),whitePun4=new Pun("wPun4");
    Piece whitePun5=new Pun("wPun5"),whitePun6=new Pun("wPun6"),whitePun7=new Pun("wPun7"),whitePun8=new Pun("wPun8");
    Knight whiteKnight1= new Knight("wKnight1"), whiteKnight2= new Knight("wKnight2"), blackKnight1= new Knight("bKnight1"), blackKnight2=new Knight("bKnight2");
    Bishop whiteWhiteBishop= new Bishop("wWhiteBishop"),whiteBlackBishop= new Bishop("wBlackBishop"),blackWhiteBishop= new Bishop("bWhiteBishop"),blackBlackBishop= new Bishop("bBlackBishop");
    Rook whiteRook1= new Rook("whRook1"),whiteRook2= new Rook("wRook2"),blackRook1= new Rook("bRook1"),blackRook2= new Rook("bRook2");
    Queen whiteQueen= new Queen("wQueen"), blackQueen= new Queen("bQueen");
    Piece whiteKing= new King("wKing"), blackKing= new King("bKing");
    ArrayList<JButton> labels;String initialSpot, finalSpot,cl="W";
    int numberOfMoves= 0;Color initialColor;
    String kingLocations [] = new String[2];
    boolean onCheck;
    void defaultState(){
    gameState1.put("A1W",whiteRook1);
    gameState1.put("B1W",whiteKnight2);
    gameState1.put("C1W",whiteWhiteBishop );
    gameState1.put("D1W",whiteKing);
    gameState1.put("E1W",whiteQueen);
    gameState1.put("F1W",whiteBlackBishop );
    gameState1.put("G1W",whiteKnight1 );
    gameState1.put("H1W",whiteRook2);
    
    gameState1.put("A8B",blackRook1);
    gameState1.put("B8B",blackKnight2);
    gameState1.put("C8B",blackBlackBishop);
    gameState1.put("D8B",blackKing);
    gameState1.put("E8B",blackQueen);
    gameState1.put("F8B",blackWhiteBishop);
    gameState1.put("G8B",blackKnight1);
    gameState1.put("H8B",blackRook2 );
    
    gameState1.put("A2W",whitePun1);
    gameState1.put("B2W",whitePun2);
    gameState1.put("C2W",whitePun3);
    gameState1.put("D2W",whitePun4);
    gameState1.put("E2W",whitePun5);
    gameState1.put("F2W",whitePun6);
    gameState1.put("G2W",whitePun7);
    gameState1.put("H2W",whitePun8);
    
    gameState1.put("A7B",blackPun1);
    gameState1.put("B7B",blackPun2);
    gameState1.put("C7B",blackPun3);
    gameState1.put("D7B",blackPun4);
    gameState1.put("E7B",blackPun5);
    gameState1.put("F7B",blackPun6);
    gameState1.put("G7B",blackPun7);
    gameState1.put("H7B",blackPun8);
    
    kingLocations[0]= "D1";
    kingLocations[1]= "D8";
    
    gameState2= reversedMap(gameState1);
}

    ArrayList<Piece> removePiece(){
    return boardPieces;
}

    Map<Piece, String> reversedMap (Map<String ,Piece> map1){
    Map<Piece,String> map2= new HashMap<Piece,String>();
    for (String k : map1.keySet()){
        map2.put(map1.get(k), k);
    }
    
    return map2;
}

    Map<String, JButton> reversedMap2 (Map<JButton ,String> map1){
    Map<String, JButton> map2= new HashMap<String,JButton>();
    for (JButton k : map1.keySet()){
        map2.put(map1.get(k), k);
    }
    return map2;
}

    /**
     * Creates new form BoardInterface
     */
    
    public BoardInterface() {
        initComponents();
        defaultState();
         loadBoard();
         setSize(screenSize);
         setTitle("Chess Game");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1094, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        
    }//GEN-LAST:event_formMousePressed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged

    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
                       
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
           
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    
    void loadBoard(){
        String []column = {"A","B","C","D","E","F","G","H"};
        //Color [] colors = {Color.WHITE, Color.BLACK};
        labels = createSpots();
        rollback();
        board2=reversedMap2(board);
        putPieces();
        }
    
    void putPieces(){
          board2.get("A1").setIcon(wWhiteR);board2.get("B1").setIcon(bWhiteKn);board2.get("C1").setIcon(wWhiteB);board2.get("D1").setIcon(bWhiteK);
          board2.get("E1").setIcon(wWhiteQ);board2.get("F1").setIcon(bWhiteB);board2.get("G1").setIcon(wWhiteKn);board2.get("H1").setIcon(bWhiteR);
          board2.get("A2").setIcon(bWhiteP);board2.get("B2").setIcon(wWhiteP);board2.get("C2").setIcon(bWhiteP);board2.get("D2").setIcon(wWhiteP);
          board2.get("E2").setIcon(bWhiteP);board2.get("F2").setIcon(wWhiteP);board2.get("G2").setIcon(bWhiteP);board2.get("H2").setIcon(wWhiteP);
          board2.get("A8").setIcon(bBlackR);board2.get("B8").setIcon(wBlackKn);board2.get("C8").setIcon(bBlackB);board2.get("D8").setIcon(wBlackK);
          board2.get("E8").setIcon(bBlackQ);board2.get("F8").setIcon(wBlackB);board2.get("G8").setIcon(bBlackKn);board2.get("H8").setIcon(wBlackR);
          board2.get("A7").setIcon(wBlackP);board2.get("B7").setIcon(bBlackP);board2.get("C7").setIcon(wBlackP);board2.get("D7").setIcon(bBlackP);
          board2.get("E7").setIcon(wBlackP);board2.get("F7").setIcon(bBlackP);board2.get("G7").setIcon(wBlackP);board2.get("H7").setIcon(bBlackP);
       }       
    
    void rollback(){
        String []column = {"A","B","C","D","E","F","G","H"};
        Color [] colors = {Color.YELLOW, Color.GREEN};
        for (int i =0; i<8;i++){
            int p = i%2;
            int j =0;
            for (String l : column){
                JButton spot = labels.get(i * (column.length) + j);
                spot.setLocation(j * 90 +300, i * 90+10 );
                spot.setBackground(colors[p%2]);
                spot.setVisible(true);
                spot.setText(l + Integer.toString(i+1));
                add(spot);                               
                board.put(spot,l + Integer.toString(i+1));
                j++;
                p++;
            }
    }
    }
    
    void nextMoves(){
        if(numberOfMoves%2==0){
            System.out.println("White to move");
        }
        else {
            System.out.println("Black to move");
        }
    }
    
    ArrayList<JButton> createSpots(){
        ArrayList<JButton> labels = new ArrayList<JButton>();
        int i=0;
        while (i<64){
            final JButton c = new JButton();
             c.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if(!c.getBackground().equals(Color.ORANGE)){
                        if(initialClicked!=null){
                        initialClicked.setBackground(initialColor);
                        rollback();
                        }
                        JButton j =(JButton)e.getSource();
                        boolean t =gameState1.containsKey(board.get(j) + cl);
                        if(t){
                            System.out.print("Here");
                            initialColor = c.getBackground();
                            initialClicked = c;
                            initialSpot = c.getText();
                            c.setBackground(Color.blue);
                            moves = new MovementAI(board.get(j), gameState1, cl).getMoves();
                            effectMoves(moves);
                        } else {
                            System.out.println("You clicked the spot" + board.get(j));
                        }                                    
                    } else {
                        finalSpot= c.getText();
                        rollback();
                        makeMove(initialClicked, c);
                        nextMoves();
                     }
                }
                });
            c.setSize(90,90);
            labels.add(c);
            i++;
        }
        return labels;
    }
    
    void makeMove(JButton initial, JButton last){
        last.setIcon(initial.getIcon());
        initial.setIcon(null);
        updateBoard(initialSpot,finalSpot,cl);
        numberOfMoves++;
        if(numberOfMoves % 2== 1){
            cl = "B";
        } else {
            cl= "W";
        }
    }
    
    void updateBoard(String initialSpot, String finalSpot, String cl){
        Piece piece= gameState1.get(initialSpot + cl);
        if(cl.equals("B")){
            if(gameState1.containsKey(finalSpot + "W")){
                gameState1.remove(finalSpot + "W");
                JOptionPane.showMessageDialog(null,"A white piece has been captured");
            }
        } else {
                if(gameState1.containsKey(finalSpot + "B")){
                gameState1.remove(finalSpot + "B");
                JOptionPane.showMessageDialog(null,"A black piece has been captured");
            }
        }
        gameState1.remove(initialSpot + cl);
        gameState1.put(finalSpot + cl,piece);
        System.out.println("In");
        gameState2= reversedMap(gameState1);
        //System.exit(0);
        onCheck= isKingChecked();
        if(onCheck && cl.equals("B")){
            JOptionPane.showMessageDialog(null, "White King on check");
        } else if (onCheck && cl.equals("W")){
            JOptionPane.showMessageDialog(null, "Black King on check");
        }
    }
    
    boolean isKingChecked(){
       String kingLocation;
       if(cl.equals("B")){
           kingLocation = kingLocations[0];
       } else {
           kingLocation = kingLocations[1];
       }
       return new GameEvent().isKingChecked(cl, gameState2, kingLocation);
   }
    
    void effectMoves(ArrayList<String> moves){
       for (String move : moves){
              JButton p = board2.get(move.substring(0,2));
              p.setBackground(Color.ORANGE);
          }
   }
    
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BoardInterface().setVisible(true);
              
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

               
            }
